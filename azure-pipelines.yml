# Python Function App to Linux on Azure.
# Build a Python function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
      - develop
  tags:
    include:
      - '*'

variables:
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/'

  # Python version
  pythonVersion: '3.8'


stages:
- stage: CodeAnalysis
  displayName: Code Analysis
  jobs:
  - job: BlackDuck
    displayName: Black Duck Scan
    pool:
      name: hrXReleasePipeline
      demands:
      - python3.8
    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(pythonVersion)'
      inputs:
        versionSpec: $(pythonVersion)
    - bash: |
        python -m pip install --upgrade pip
        pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
      workingDirectory: $(workingDirectory)
      displayName: 'Install application dependencies'
    - task: PowerShell@2
      displayName: 'Prevent false Poetry error'
      inputs: 
        targetType: 'inline'
        script: |
          # Workaround to be removed once we can run Detect v8
          $FileName = "pyproject.toml"
          if (Test-Path $FileName) {
            Remove-Item $FileName -verbose
          }
    - task: synopsys-detect.synopsys-detect.synopsys-detect-task.SynopsysDetectTask@2
      displayName: 'Run Synopsys Detect for your build '
      inputs:
        products: BD
        blackDuckService: 'blackduck1'
        detectArguments: |
          --blackduck.trust.cert=true
          --detect.project.name=$(Build.Repository.Name)
          --detect.blackduck.signature.scanner.paths=$(System.DefaultWorkingDirectory)
          --detect.policy.check.fail.on.severities=BLOCKER
          --detect.project.version.name="Default Detect Version"
#    - task: synopsys-detect.synopsys-detect.synopsys-detect-task.SynopsysDetectTask@7
#      displayName: 'Run Synopsys Detect for your build '
#      inputs:
#        products: BD
#        blackDuckService: 'Synopsys Black Duck Server'
#        detectArguments: |
#          --blackduck.trust.cert=true
#          --detect.project.name=$(Build.Repository.Name)
#          --detect.blackduck.signature.scanner.paths=$(System.DefaultWorkingDirectory)
#          --detect.policy.check.fail.on.severities=BLOCKER

- stage: Publish
  displayName: Publish stage
  dependsOn: CodeAnalysis

  jobs:
  - job: CalculateVersion
    displayName: Calculate version number
    pool:
      vmImage: $(vmImageName)

    steps:
    - script: |
        if [[ $(Build.SourceBranch) =~ 'refs/tags/' ]]; then
          echo '##vso[task.setvariable variable=version;isOutput=true]$(Build.SourceBranchName)'
        else
          echo '##vso[task.setvariable variable=version;isOutput=true]0.0.0-build.$(Build.BuildNumber)'
        fi
      name: setVersion
      displayName: Set version

    - script: |
        echo Version is $(setVersion.version)
      name: echoVersion
      displayName: 'Echo version'

  - job: Publish
    displayName: Publish
    dependsOn: CalculateVersion
    pool:
      vmImage: $(vmImageName)
    variables:
      version: $[ dependencies.CalculateVersion.outputs['setVersion.version'] ]
      archiveFileName: hrx-eloise-ml-functions-$(version)

    steps:
    #- bash: |
    #    if [ -f extensions.csproj ]
    #    then
    #        dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
    #    fi
    #  workingDirectory: $(workingDirectory)
    #  displayName: 'Build extensions'
    - task: UsePythonVersion@0
      displayName: 'Use Python $(pythonVersion)'
      inputs:
        versionSpec: $(pythonVersion)

    - bash: |
        python -m pip install --upgrade pip
        pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
      workingDirectory: $(workingDirectory)
      displayName: 'Install application dependencies'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(workingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(archiveFileName).zip
        replaceExistingArchive: true
    - publish: $(Build.ArtifactStagingDirectory)/$(archiveFileName).zip
      artifact: drop